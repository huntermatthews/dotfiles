#! /usr/bin/env fish

set -g HELP "
Usage: $(status basename) [options...] [--list | XXX ] <subcmd>

DESCRIPTION HERE

Optional Arguments
        --debug              Print debug information
    -h, --help               Print this help
        --key <key>          Print the data for key in plain text, one line per item, format.
                             If you need actual json, just give no arguments and program will print
                             the whole JSON response.
        --list               List the categories/keys of the GitHUB api's IP addresses
"

set -g DOTS_LIBEXEC $DOTS/libexec/dots

# FIXME: check for DOTS before using
source $DOTS_LIBEXEC/common-lib.fish
or begin
    echo "FATAL: could not source common-lib.fish -- exiting program..."
    exit 11
end

# check the rest of our minimal config assumptions
dots_require_base_config

# all this script does is serve as a front-end to others
# we can assume that dots-bootstrap.sh has already run.
#
# dots <subcmd> looks in $DOTS/libexec/dots to find its subcmds and runs them.
# dots --help show list of subcommands as does "list" or maybe "--list"
# dots --version / version subcmd shows version for dots itself
# v2.0 dots --requires (or --assure --demand ?) shows requirements (files or programs) that are required to function?
# dots <subcmd> --help shows only help output for that subcmd -- so --help MUST exist.
# dots <subcmd> --version shows only version?  No - invalid, target scripts can be SIMPLE - besides, what am I versioning?
# v2.0 dots setup runs all setup* prefixed subcmds   -- tricky....

function main
    argparse --name (status basename) --stop-nonopt --ignore-unknown debug h/help l/list version -- $argv
    or begin
        echo $HELP
        exit 1
    end

    if set -q _flag_debug
        set -g FLAG_DEBUG true
    end

    if set -q _flag_help
        echo $HELP
        exit 0
    end

    if set -q _flag_version
        echo (status basename) v$VERSION
        exit 0
    end

    if set -q argv[1]
        # First arg is a subcmd - it needs to exist in $DOTS_LIBEXEC
        set -l subcmd $DOTS_LIBEXEC/$argv[1]
        set -l subcmd_args $argv[2..-1]
        debug "subcmd: $subcmd"
        debug "subcmd_args: $subcmd_args"

        # check for the subcmd in $DOTS_LIBEXEC
        # TODO: figure out what we need here to make exec work
        if test -f $subcmd -a -x $subcmd
            debug "about to run subcmd program"
            $subcmd $subcmd_args
        else
            panic "subcommand '$argv[1]' not found in $DOTS_LIBEXEC"
        end
    else
        echo "No subcommand given."
        echo $HELP
        exit 1
    end
end

# Call main
main $argv

## END OF LINE ##
