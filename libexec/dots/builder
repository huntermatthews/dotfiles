#! /usr/bin/env fish

set -g HELP "
Usage: $(status basename) NONE

DESCRIPTION HERE

Optional Arguments
        --debug              Print debug information
    -h, --help               Print this help
"

set -g DOTS_LIBEXEC $DOTS/libexec/dots

# FIXME: check for DOTS before using
source $DOTS_LIBEXEC/common-lib.fish
or begin
    echo "FATAL: could not source common-lib.fish -- exiting program..."
    exit 11
end

# check the rest of our minimal config assumptions
dots_require_base_config

function blocker
    set hashes '##################################################'
    echo $hashes
    for line in $argv
        echo "## $line"
    end
    echo $hashes
    echo
end

function main
    argparse --name (status basename) debug h/help -- $argv
    or begin
        echo $HELP
        exit 1
    end
    if set -q _flag_debug
        set -g FLAG_DEBUG true
    end

    # We need two positional arguments - 1) filename for output and 2) the pattern to match
    if test (count $argv) -ne 2
        panic "missing required arguments"
    end
    set -l outfile $argv[1]
    set -l pattern $argv[2]
    debug --var outfile
    debug --var pattern

    # Get ALL the pattern matched files - including ALL the profiles
    set files $DOTS/*/*$pattern
    debug --var-spaces files

    # Dumb but effective - remove ALL the profile related files
    set files (string match --entire --invert _profile $files)
    debug --var-spaces files

    set profile_files $DOTS/{$DOTS_PROFILE}_profile/*$pattern
    debug --var-spaces profile_files

    set files $profile_files $files
    debug --var-spaces files

    # cat them all together
    blocker dots-builder $(date -Iseconds) "Generated file - do not edit!" >$outfile

    for file in $files
        [ $DOTS_DEBUG = 1 ] && blocker "original file: $file" >>$outfile
        cat $file >>$outfile
        [ $DOTS_DEBUG = 1 ] && echo \n\n >>$outfile
    end

    blocker "end of file" >>$outfile

end

# Call main
main $argv

# END OF LINE #
